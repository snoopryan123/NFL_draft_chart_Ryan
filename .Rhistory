theme(legend.key.width=unit(2.5,"cm")) +
scale_color_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1", na.translate=F
) +
scale_fill_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1", na.translate=F
) +
theme(
legend.text = element_text(size=16),
legend.title = element_text(size=16),
) +
scale_y_continuous(breaks=seq(0,2,by=0.5)) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_VG_S
ggsave("plots_byPos/plot_G_surplusValueCurves_byQB.png",width=11, height=4)
filename_func_2 = "plots_byPos/df_V_G_step_2_S.csv"
fit_func_2 = !file.exists(filename_func_2) | OVERWRITE | !USE_SAVED_COMPUTATIONS
if (fit_func_2) {
# q_ = 0.10
q_ = q_grid[2]
df_V_G_step_2_S = get_df_V_G_QB(
G_func=G_step_func(q=q_), surplus = T, desc=paste0("g(y) = 1{y>",formattable::percent(q_,pd_),"}"),q=q_, type="step"
)
write_csv(df_V_G_step_2_S, filename_func_2)
} else {
df_V_G_step_2_S = read_csv(filename_func_2)
}
df_V_G_step_2_S
filename_func_3 = "plots_byPos/df_V_G_step_3_S.csv"
fit_func_3 = !file.exists(filename_func_3) | OVERWRITE | !USE_SAVED_COMPUTATIONS
if (fit_func_3) {
# q_ = 0.125
q_ = q_grid[3]
df_V_G_step_3_S = get_df_V_G_QB(
G_func=G_step_func(q=q_), surplus = T, desc=paste0("g(y) = 1{y>",formattable::percent(q_,pd_),"}"),q=q_, type="step"
)
write_csv(df_V_G_step_3_S, filename_func_3)
} else {
df_V_G_step_3_S = read_csv(filename_func_3)
}
df_V_G_step_3_S
filename_func_4 = "plots_byPos/df_V_G_step_4_S.csv"
fit_func_4 = !file.exists(filename_func_4) | OVERWRITE | !USE_SAVED_COMPUTATIONS
if (fit_func_4) {
# q_ = 0.15
q_ = q_grid[4]
df_V_G_step_4_S = get_df_V_G_QB(
G_func=G_step_func(q=q_), surplus = T, desc=paste0("g(y) = 1{y>",formattable::percent(q_,pd_),"}"),q=q_, type="step"
)
write_csv(df_V_G_step_4_S, filename_func_4)
} else {
df_V_G_step_4_S = read_csv(filename_func_4)
}
df_V_G_step_4_S
filename_func_id = "plots_byPos/df_V_G_step_id_S.csv"
fit_func_id = !file.exists(filename_func_id) | OVERWRITE | !USE_SAVED_COMPUTATIONS
if (fit_func_id) {
df_V_G_id_S = get_df_V_G_QB(G_func=function(y) { y }, surplus = T, desc=paste0("g(y) = y"), type="linear")
write_csv(df_V_G_id_S, filename_func_id)
} else {
df_V_G_id_S = read_csv(filename_func_id)
}
### visualize
plot_VG_S =
bind_rows(
df_V_G_step_1_S,
df_V_G_step_2_S,
df_V_G_step_3_S,
df_V_G_step_4_S,
# df_V_G_id_S %>% mutate(desc="Expected\\nsurplus\nvalue"),
) %>%
mutate(q1 = formattable::percent(q,pd_)) %>%
mutate(ordering = ifelse(QB == "QB", 1, 2)) %>%
# ggplot(aes(x=draft_pick)) +
ggplot(aes(x = draft_pick, y = v1_M)) +
facet_wrap(~reorder(QB,ordering)) +
geom_hline(yintercept=1, linetype="dashed", color="gray60", linewidth=1) +
geom_hline(yintercept=0, linetype="dashed", color="gray60", linewidth=1) +
geom_ribbon(aes(ymin = v1_L, ymax=v1_U, fill = factor(q1)),
data = . %>% filter(!is.na(q)), alpha = 0.35) +
geom_line(linewidth=2, aes(color=factor(q1)), data = . %>% filter(!is.na(q))) +
geom_line(linewidth=2, aes(linetype=desc), data = . %>% filter(is.na(q)) ) +
scale_linetype_manual(name="", values = c(
"longdash", "solid"
)) +
ylab("Value relative to first QB pick") +
xlab("Draft position") +
theme(legend.key.width=unit(2.5,"cm")) +
scale_color_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1", na.translate=F
) +
scale_fill_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1", na.translate=F
) +
theme(
legend.text = element_text(size=16),
legend.title = element_text(size=16),
) +
scale_y_continuous(breaks=seq(0,2,by=0.5)) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_VG_S
ggsave("plots_byPos/plot_G_surplusValueCurves_byQB.png",width=11, height=4)
filename_func_id = "plots_byPos/df_V_G_step_id_S.csv"
fit_func_id = !file.exists(filename_func_id) | OVERWRITE | !USE_SAVED_COMPUTATIONS
if (fit_func_id) {
df_V_G_id_S = get_df_V_G_QB(G_func=function(y) { y }, surplus = T, desc=paste0("g(y) = y"), type="linear")
write_csv(df_V_G_id_S, filename_func_id)
} else {
df_V_G_id_S = read_csv(filename_func_id)
}
get_df_V_G_QB
### get V_G(x) for identity function G(y) = y
df_V_G_id_S = get_df_V_G_QB(G_func=function(y) { y }, desc=paste0("g(y) = y"), surplus=TRUE)
### get dataframe of V_G(x,QB) = E[G(Y)|x,QB] = ∫ G(y)•f(y|x,QB) dy
### over each value of x,QB
get_df_V_G_QB <- function(
G_func, desc="", surplus=FALSE, q=NA, type=""
) {
vals = numeric(nrow(df_post_draws_shapeparams_QB))
for (j in 1:nrow(df_post_draws_shapeparams_QB)) {
params_j = df_post_draws_shapeparams_QB[j,]
print(paste0("j=",j,"/",nrow(df_post_draws_shapeparams_QB),
", pick=",params_j$draft_pick,", draw=",params_j$draw,", QB=",params_j$QB))
integrand = G_times_density(
bust_prob = params_j$bust_prob,
shape1 = params_j$shape1,
shape2 = params_j$shape2,
cost = params_j$cost,
G_func=G_func,
surplus=surplus
)
if (j == 72447) browser()
integral = integrate(integrand, lower = 0, upper = 1)
vals[j] = integral$value
}
df_results = df_post_draws_shapeparams_QB
df_results$v = vals
df_results_1 =
df_results %>%
### group_by(draw,QB) %>%
##### value relative to first QB pick
group_by(draw) %>%
mutate(v1 = v/first(v)) %>%
group_by(draft_pick,QB) %>%
reframe(
v_L = quantile(v, .025),
v_M = mean(v),
v_U = quantile(v, 0.975),
v1_L = quantile(v1, .025),
v1_M = mean(v1),
v1_U = quantile(v1, 0.975),
)
df_results_1
df_V_G = df_results_1 %>% mutate(desc = desc, type = type, surplus = surplus, q=q)
df_V_G
}
### get V_G(x) for identity function G(y) = y
df_V_G_id_S = get_df_V_G_QB(G_func=function(y) { y }, desc=paste0("g(y) = y"), surplus=TRUE)
integrand
params_j
integral = integrate(integrand, lower = 0, upper = 1)
integral
integral = integrate(integrand, lower = 0, upper = 1, rel.tol = 1e-15)
integral
j
### get dataframe of V_G(x,QB) = E[G(Y)|x,QB] = ∫ G(y)•f(y|x,QB) dy
### over each value of x,QB
get_df_V_G_QB <- function(
G_func, desc="", surplus=FALSE, q=NA, type=""
) {
vals = numeric(nrow(df_post_draws_shapeparams_QB))
for (j in 1:nrow(df_post_draws_shapeparams_QB)) {
params_j = df_post_draws_shapeparams_QB[j,]
print(paste0("j=",j,"/",nrow(df_post_draws_shapeparams_QB),
", pick=",params_j$draft_pick,", draw=",params_j$draw,", QB=",params_j$QB))
integrand = G_times_density(
bust_prob = params_j$bust_prob,
shape1 = params_j$shape1,
shape2 = params_j$shape2,
cost = params_j$cost,
G_func=G_func,
surplus=surplus
)
# if (j == 72447) browser()
# integral = integrate(integrand, lower = 0, upper = 1)
# integral = integrate(integrand, lower = 0, upper = 1, rel.tol = 1e-15)
integral = tryCatch(
expr = {
integrate(integrand, lower = 0, upper = 1)
},
error = function(e){
integrate(integrand, lower = 0, upper = 1, rel.tol = 1e-15)
},
)
vals[j] = integral$value
}
df_results = df_post_draws_shapeparams_QB
df_results$v = vals
df_results_1 =
df_results %>%
### group_by(draw,QB) %>%
##### value relative to first QB pick
group_by(draw) %>%
mutate(v1 = v/first(v)) %>%
group_by(draft_pick,QB) %>%
reframe(
v_L = quantile(v, .025),
v_M = mean(v),
v_U = quantile(v, 0.975),
v1_L = quantile(v1, .025),
v1_M = mean(v1),
v1_U = quantile(v1, 0.975),
)
df_results_1
df_V_G = df_results_1 %>% mutate(desc = desc, type = type, surplus = surplus, q=q)
df_V_G
}
### get V_G(x) for identity function G(y) = y
df_V_G_id_S = get_df_V_G_QB(G_func=function(y) { y }, desc=paste0("g(y) = y"), surplus=TRUE)
### get dataframe of V_G(x,QB) = E[G(Y)|x,QB] = ∫ G(y)•f(y|x,QB) dy
### over each value of x,QB
get_df_V_G_QB <- function(
G_func, desc="", surplus=FALSE, q=NA, type=""
) {
vals = numeric(nrow(df_post_draws_shapeparams_QB))
for (j in 1:nrow(df_post_draws_shapeparams_QB)) {
params_j = df_post_draws_shapeparams_QB[j,]
print(paste0("j=",j,"/",nrow(df_post_draws_shapeparams_QB),
", pick=",params_j$draft_pick,", draw=",params_j$draw,", QB=",params_j$QB))
integrand = G_times_density(
bust_prob = params_j$bust_prob,
shape1 = params_j$shape1,
shape2 = params_j$shape2,
cost = params_j$cost,
G_func=G_func,
surplus=surplus
)
# if (j == 72447) browser()
# integral = integrate(integrand, lower = 0, upper = 1)
# integral = integrate(integrand, lower = 0, upper = 1, rel.tol = 1e-15)
integral = tryCatch(
{
return(integrate(integrand, lower = 0, upper = 1))
},
error = function(e){
return(integrate(integrand, lower = 0, upper = 1, rel.tol = 1e-15))
},
)
vals[j] = integral$value
}
df_results = df_post_draws_shapeparams_QB
df_results$v = vals
df_results_1 =
df_results %>%
### group_by(draw,QB) %>%
##### value relative to first QB pick
group_by(draw) %>%
mutate(v1 = v/first(v)) %>%
group_by(draft_pick,QB) %>%
reframe(
v_L = quantile(v, .025),
v_M = mean(v),
v_U = quantile(v, 0.975),
v1_L = quantile(v1, .025),
v1_M = mean(v1),
v1_U = quantile(v1, 0.975),
)
df_results_1
df_V_G = df_results_1 %>% mutate(desc = desc, type = type, surplus = surplus, q=q)
df_V_G
}
### get V_G(x) for identity function G(y) = y
df_V_G_id_S = get_df_V_G_QB(G_func=function(y) { y }, desc=paste0("g(y) = y"), surplus=TRUE)
### get dataframe of V_G(x,QB) = E[G(Y)|x,QB] = ∫ G(y)•f(y|x,QB) dy
### over each value of x,QB
get_df_V_G_QB <- function(
G_func, desc="", surplus=FALSE, q=NA, type=""
) {
vals = numeric(nrow(df_post_draws_shapeparams_QB))
for (j in 1:nrow(df_post_draws_shapeparams_QB)) {
params_j = df_post_draws_shapeparams_QB[j,]
print(paste0("j=",j,"/",nrow(df_post_draws_shapeparams_QB),
", pick=",params_j$draft_pick,", draw=",params_j$draw,", QB=",params_j$QB))
integrand = G_times_density(
bust_prob = params_j$bust_prob,
shape1 = params_j$shape1,
shape2 = params_j$shape2,
cost = params_j$cost,
G_func=G_func,
surplus=surplus
)
# if (j == 72447) browser()
# integral = integrate(integrand, lower = 0, upper = 1)
# integral = integrate(integrand, lower = 0, upper = 1, rel.tol = 1e-15)
integral = tryCatch(
integrate(integrand, lower = 0, upper = 1),
error = function(e){
return(integrate(integrand, lower = 0, upper = 1, rel.tol = 1e-15))
},
)
vals[j] = integral$value
}
df_results = df_post_draws_shapeparams_QB
df_results$v = vals
df_results_1 =
df_results %>%
### group_by(draw,QB) %>%
##### value relative to first QB pick
group_by(draw) %>%
mutate(v1 = v/first(v)) %>%
group_by(draft_pick,QB) %>%
reframe(
v_L = quantile(v, .025),
v_M = mean(v),
v_U = quantile(v, 0.975),
v1_L = quantile(v1, .025),
v1_M = mean(v1),
v1_U = quantile(v1, 0.975),
)
df_results_1
df_V_G = df_results_1 %>% mutate(desc = desc, type = type, surplus = surplus, q=q)
df_V_G
}
### get V_G(x) for identity function G(y) = y
df_V_G_id_S = get_df_V_G_QB(G_func=function(y) { y }, desc=paste0("g(y) = y"), surplus=TRUE)
### get dataframe of V_G(x,QB) = E[G(Y)|x,QB] = ∫ G(y)•f(y|x,QB) dy
### over each value of x,QB
get_df_V_G_QB <- function(
G_func, desc="", surplus=FALSE, q=NA, type=""
) {
vals = numeric(nrow(df_post_draws_shapeparams_QB))
for (j in 1:nrow(df_post_draws_shapeparams_QB)) {
params_j = df_post_draws_shapeparams_QB[j,]
print(paste0("j=",j,"/",nrow(df_post_draws_shapeparams_QB),
", pick=",params_j$draft_pick,", draw=",params_j$draw,", QB=",params_j$QB))
integrand = G_times_density(
bust_prob = params_j$bust_prob,
shape1 = params_j$shape1,
shape2 = params_j$shape2,
cost = params_j$cost,
G_func=G_func,
surplus=surplus
)
# if (j == 72447) browser()
# integral = integrate(integrand, lower = 0, upper = 1)
# integral = integrate(integrand, lower = 0, upper = 1, rel.tol = 1e-15)
safe_integrate <- function(integrand, lower = 0, upper = 1) {
result <- tryCatch(
integrate(integrand, lower, upper),
error = function(e) {
message("Error encountered, retrying with rel.tol = 1e-15")
integrate(integrand, lower, upper, rel.tol = 1e-15)
}
)
return(result)
}
integral = safe_integrate(integrand)
vals[j] = integral$value
}
df_results = df_post_draws_shapeparams_QB
df_results$v = vals
df_results_1 =
df_results %>%
### group_by(draw,QB) %>%
##### value relative to first QB pick
group_by(draw) %>%
mutate(v1 = v/first(v)) %>%
group_by(draft_pick,QB) %>%
reframe(
v_L = quantile(v, .025),
v_M = mean(v),
v_U = quantile(v, 0.975),
v1_L = quantile(v1, .025),
v1_M = mean(v1),
v1_U = quantile(v1, 0.975),
)
df_results_1
df_V_G = df_results_1 %>% mutate(desc = desc, type = type, surplus = surplus, q=q)
df_V_G
}
### get V_G(x) for identity function G(y) = y
df_V_G_id_S = get_df_V_G_QB(G_func=function(y) { y }, desc=paste0("g(y) = y"), surplus=TRUE)
### visualize
plot_VG =
bind_rows(
df_V_G_step_1,
df_V_G_step_2,
df_V_G_step_3,
df_V_G_step_4,
df_V_G_id %>% mutate(desc="Expected\nperformance\nvalue"),
) %>%
mutate(q1 = formattable::percent(q,pd_)) %>%
mutate(ordering = ifelse(QB == "QB", 1, 2)) %>%
# ggplot(aes(x=draft_pick)) +
ggplot(aes(x = draft_pick, y = v1_M)) +
facet_wrap(~reorder(QB,ordering)) +
geom_ribbon(aes(ymin = v1_L, ymax=v1_U, fill = factor(q1)),
data = . %>% filter(!is.na(q)), alpha = 0.35) +
geom_line(linewidth=2, aes(color=factor(q1)), data = . %>% filter(!is.na(q))) +
geom_line(linewidth=2, aes(linetype=desc), data = . %>% filter(is.na(q)) ) +
scale_linetype_manual(name="", values = c(
"dotted", "solid"
)) +
ylab("Value relative to first QB pick") +
xlab("Draft position") +
theme(legend.key.width=unit(2.5,"cm")) +
scale_color_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1", na.translate=F
) +
scale_fill_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1", na.translate=F
) +
theme(
legend.text = element_text(size=16),
legend.title = element_text(size=16),
) +
# scale_y_continuous(limits=c(0,1)) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_VG
ggsave("plots_byPos/plot_G_valueCurves_byQB.png",width=11, height=4)
### visualize
plot_VG_S =
bind_rows(
df_V_G_step_1_S,
df_V_G_step_2_S,
df_V_G_step_3_S,
df_V_G_step_4_S,
df_V_G_id_S %>% mutate(desc="Expected\\nsurplus\nvalue"),
) %>%
mutate(q1 = formattable::percent(q,pd_)) %>%
mutate(ordering = ifelse(QB == "QB", 1, 2)) %>%
# ggplot(aes(x=draft_pick)) +
ggplot(aes(x = draft_pick, y = v1_M)) +
facet_wrap(~reorder(QB,ordering)) +
geom_hline(yintercept=1, linetype="dashed", color="gray60", linewidth=1) +
geom_hline(yintercept=0, linetype="dashed", color="gray60", linewidth=1) +
geom_ribbon(aes(ymin = v1_L, ymax=v1_U, fill = factor(q1)),
data = . %>% filter(!is.na(q)), alpha = 0.35) +
geom_line(linewidth=2, aes(color=factor(q1)), data = . %>% filter(!is.na(q))) +
geom_line(linewidth=2, aes(linetype=desc), data = . %>% filter(is.na(q)) ) +
scale_linetype_manual(name="", values = c(
"longdash", "solid"
)) +
ylab("Value relative to first QB pick") +
xlab("Draft position") +
theme(legend.key.width=unit(2.5,"cm")) +
scale_color_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1", na.translate=F
) +
scale_fill_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1", na.translate=F
) +
theme(
legend.text = element_text(size=16),
legend.title = element_text(size=16),
) +
scale_y_continuous(breaks=seq(0,2,by=0.5)) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_VG_S
ggsave("plots_byPos/plot_G_surplusValueCurves_byQB.png",width=11, height=4)
### visualize
plot_VG_S =
bind_rows(
df_V_G_step_1_S,
df_V_G_step_2_S,
df_V_G_step_3_S,
df_V_G_step_4_S,
df_V_G_id_S %>% mutate(desc="Expected\nsurplus\nvalue"),
) %>%
mutate(q1 = formattable::percent(q,pd_)) %>%
mutate(ordering = ifelse(QB == "QB", 1, 2)) %>%
# ggplot(aes(x=draft_pick)) +
ggplot(aes(x = draft_pick, y = v1_M)) +
facet_wrap(~reorder(QB,ordering)) +
geom_hline(yintercept=1, linetype="dashed", color="gray60", linewidth=1) +
geom_hline(yintercept=0, linetype="dashed", color="gray60", linewidth=1) +
geom_ribbon(aes(ymin = v1_L, ymax=v1_U, fill = factor(q1)),
data = . %>% filter(!is.na(q)), alpha = 0.35) +
geom_line(linewidth=2, aes(color=factor(q1)), data = . %>% filter(!is.na(q))) +
geom_line(linewidth=2, aes(linetype=desc), data = . %>% filter(is.na(q)) ) +
scale_linetype_manual(name="", values = c(
"longdash", "solid"
)) +
ylab("Value relative to first QB pick") +
xlab("Draft position") +
theme(legend.key.width=unit(2.5,"cm")) +
scale_color_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1", na.translate=F
) +
scale_fill_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1", na.translate=F
) +
theme(
legend.text = element_text(size=16),
legend.title = element_text(size=16),
) +
scale_y_continuous(breaks=seq(0,2,by=0.5)) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_VG_S
ggsave("plots_byPos/plot_G_surplusValueCurves_byQB.png",width=11, height=4)
df_V_G_id_S
write_csv(df_V_G_id_S, filename_func_id)
