scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_empWithCondMean
plot_empWithCondSd =
df_plot_musdbp %>%
ggplot(aes(x = draft_pick)) +
geom_point(aes(y=emp_sd_tail), color="gray60") +
geom_ribbon(aes(ymin = L_sd, ymax = U_sd), fill="darkslategray2", alpha=0.6) +
geom_line(aes(y = M_sd), linewidth=1) +
xlab("Draft position") +
ylab("Percentage of cap") +
labs(
# title = "Estimated sd(x)", subtitle="Given not a bust"
title = "Estimated sd(x) given not a bust"
) +
scale_y_continuous(
labels = percent_format(),
limits=c(0,.15),
) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_empWithCondSd
plot_empWithCondBp =
df_plot_musdbp %>%
filter(draft_pick < 255) %>%
ggplot(aes(x = draft_pick)) +
geom_point(aes(y=emp_bust_prob), color="gray60") +
geom_ribbon(aes(ymin = L_bust_prob, ymax = U_bust_prob), fill="darkslategray2", alpha=0.6) +
geom_line(aes(y = M_bust_prob), linewidth=1) +
xlab("Draft position") +
ylab("Probability") +
labs(title = "Estimated bp(x)") +
scale_y_continuous(limits=c(0,1)) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_empWithCondBp
plot_empWithCondLines = plot_empWithCondMean + plot_empWithCondSd + plot_empWithCondBp
# plot_empWithCondLines
ggsave(
"plots_overall/plot_empWithCondLines.png",
width=15, height=4
)
######################################################
### visualize uniform bust density P(y | x, bust)  ###
######################################################
### empirical
df_overall_emp_bustSpike =
players_2C %>%
filter(bust==1) %>%
group_by(draft_pick) %>%
summarise(
emp_mean_tail = mean(apy_cap_pct_2C),
emp_sd_tail = sd(apy_cap_pct_2C),
.groups = "drop"
)
df_overall_emp_bustSpike
plot_empBustSpikeDist =
df_overall_emp_bustSpike %>%
pivot_longer(-draft_pick) %>%
mutate(
quantity = str_remove_all(str_remove_all(name,"emp_"),"_tail"),
quantity = paste0("Empirical conditional ", quantity, " given bust"),
) %>%
ggplot(aes(x=draft_pick,y=value)) +
facet_wrap(~quantity) +
geom_point(color="gray60") +
geom_smooth(se=F, method=lm, linewidth=2, color="black") +
xlab("Draft position") +
ylab("Percentage of cap") +
scale_y_continuous(labels = percent_format()) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_empBustSpikeDist
ggsave("plots_overall/plot_empBustSpikeDist.png", width=10, height=4)
################################################
### performance value & surplus value curves ###
################################################
### performance & surplus value posterior draws
df_post_draws_perf_surplus =
df_post_draws %>%
select(draw, i, draft_pick, mu, bust_prob) %>%
mutate(perf = bust_cutoff/2 + (1 - bust_prob)*mu) %>%
select(-c(mu, bust_prob, i)) %>%
left_join(compensation_1C) %>%
rename(cost = rookie_contract_cap_pct, cost1 = compensation_v1) %>%
mutate(surplus = perf - cost) %>%
group_by(draw) %>%
mutate(
perf1 = perf/first(perf),
surplus1 = surplus/first(surplus),
) %>%
ungroup() %>%
relocate(perf1, .after = perf) %>%
relocate(surplus1, .after = surplus)
df_post_draws_perf_surplus
df_post_summary_perf_surplus =
df_post_draws_perf_surplus %>%
pivot_longer(-c(draw, draft_pick), names_to="quantity") %>%
group_by(draft_pick,quantity) %>%
reframe(
value_L =  quantile(value, .025),
value_M = mean(value),
value_U = quantile(value, .975),
) %>%
pivot_wider(names_from = "quantity", values_from = all_of(starts_with("value")))
names(df_post_summary_perf_surplus) = str_remove(names(df_post_summary_perf_surplus), "value_")
df_post_summary_perf_surplus
df_post_summary_perf_surplus_1 =
df_post_summary_perf_surplus %>%
pivot_longer(-draft_pick) %>%
mutate(
curve = str_remove_all(name, "M_|U_|L_"),
letter = str_sub(name, 1, 1),
curve = str_replace_all(curve, "perf", "performance"),
rel = ifelse(endsWith(curve, "1"), "1", ""),
curve = str_remove_all(curve, "1"),
) %>%
select(-name) %>%
pivot_wider(names_from = "letter", values_from = "value") %>%
pivot_wider(names_from = "rel", values_from = c("L","M","U"), names_sep="")
df_post_summary_perf_surplus_1
### draft value curves using v(x) = mu(x)/mu(1)
plot_post_mean_curve =
df_post_summary_perf_surplus %>%
ggplot(aes(x = draft_pick, y = M_perf1)) +
geom_ribbon(aes(ymin = L_perf1, ymax = U_perf1), fill="darkslategray2") +
geom_line(linewidth=1) +
xlab("draft pick") +
ylab("value relative to first pick") +
labs(title = "posterior mean relative EV \U03BC(x)/\U03BC(x=1)") +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_post_mean_curve
plot_surplus_condMean =
df_post_summary_perf_surplus_1 %>%
ggplot(aes(x = draft_pick, color = curve, fill = curve)) +
geom_ribbon(aes(ymin=L1, ymax=U1), alpha=0.5) +
geom_line(aes(y=M1), linewidth=1) +
xlab("draft pick") +
scale_color_manual(
name="", values=c("cost"="firebrick", "performance"="dodgerblue2", "surplus"="forestgreen")
) +
scale_fill_manual(
name="", values=c("performance"="dodgerblue2", "surplus"="forestgreen")
) +
ylab("value relative to first pick") +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_surplus_condMean
# ggsave("plots_overall/plot_surplus_condMean.png", width=8, height=5)
#########################################################
### visualize conditional density P(y | x, not bust)  ###
#########################################################
### posterior summary of the density
y_grid = seq(0.005,0.25,length.out=100)
y_grid
get_density_df <- function(y) {
print(paste0("computing density for y=",y))
df_post_draws %>%
select(i, draw, shape1, shape2, bust_prob) %>%
mutate(
y = y,
density = dbeta(y, shape1, shape2),
density_times_bp = density*(1-bust_prob)
) %>%
group_by(i,y) %>%
summarise(
density_L =  quantile(density, .025),
density_M = mean(density),
density_U = quantile(density, .975),
density_times_bp_L =  quantile(density_times_bp, .025),
density_times_bp_M = mean(density_times_bp),
density_times_bp_U = quantile(density_times_bp, .975),
.groups = "drop"
)
}
# bind_rows(lapply(c(0.005, 0.01), get_density_df))
df_post_summary_density = bind_rows(lapply(y_grid, get_density_df)) %>% left_join(df_new)
df_post_summary_density
### plot posterior conditional density
plot_full_post_density_rdsall_SE =
df_post_summary_density %>%
filter(draft_pick %in% c(seq(1,32*7,by=32/1))) %>%
ggplot(aes(x=y,
color=fct_reorder(factor(draft_pick), -draft_pick),
fill=fct_reorder(factor(draft_pick), -draft_pick))
) +
geom_line(aes(y=density_times_bp_M), linewidth=1) +
geom_ribbon(aes(ymin = density_times_bp_L, ymax=density_times_bp_U), alpha = 0.35) +
xlab("Percentage of cap") +
ylab("Density") +
scale_color_brewer(name="Draft\nposition", palette = "Set1", direction=-1) +
scale_fill_brewer(name="Draft\nposition", palette = "Set1", direction=-1) +
scale_x_continuous(labels = percent_format()) +
theme(
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
# plot_full_post_density_rdsall_SE
ggsave("plots_overall/plot_post_density_full_rdsall_SE.png", width=7, height=4)
### plot posterior conditional density
plot_func_betareg_overall_density <-
function(ex_draft_picks, includeEmp=TRUE, includeErrorBars=TRUE, saveMe=F) {
# browser()
p =
bind_rows(
df_post_summary_density,
players_2C %>% filter(bust==0) %>% select(draft_pick, apy_cap_pct_2C)
) %>%
filter(draft_pick %in% ex_draft_picks) %>%
mutate(
draft_pick_x = paste0("x = ", draft_pick),
draft_pick_x = fct_reorder(draft_pick_x, draft_pick),
) %>%
ggplot() +
facet_wrap(~ draft_pick_x) +
xlab("Percentage of cap") +
ylab("Density") +
scale_x_continuous(
labels = percent_format(),
breaks = seq(0,1,by=0.10),
) +
# labs(title = "density (given not a bust)") +
theme(
axis.text.x = element_text(size = 15),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
if (includeEmp) {
p = p +
geom_histogram(aes(x = apy_cap_pct_2C, y=after_stat(density)), fill="gray80") +
geom_density(aes(x = apy_cap_pct_2C), linewidth=0.5, color="gray60")
}
if (includeErrorBars) {
p = p + geom_ribbon(aes(x = y, ymin = density_L, ymax=density_U),
fill="darkslategray2", color="darkslategray2")
}
p = p + geom_line(aes(x = y, y = density_M), linewidth=0.5)
if (saveMe) {
filepath = paste0("plots_overall/plot_density_byPick",
"_", paste0(ex_draft_picks, collapse="_"),
if (includeEmp) "_emp" else "",
if (includeErrorBars) "_SE" else "", ".png"
)
ggsave(filepath, p, width = 9, height=7)
} else {
return(p)
}
# p
}
###
plot_func_betareg_overall_density(seq(1,64*2,by=32/4),T,T,T)
plot_func_betareg_overall_density(seq(1,64*2,by=32/4),F,T,T)
###
# plot_func_betareg_overall_density(c(seq(1,32*7,by=32/2)),F,F,F)
# plot_func_betareg_overall_density(c(seq(1,32*3,by=8), seq(32*3,32*5,by=16)),F,F,F)
# plot_func_betareg_overall_density(c(seq(1,32*2,by=32/8)),F,F,F)
# ###
# plot_func_betareg_overall_density(seq(1,64,by=32/8),T,F,T)
# plot_func_betareg_overall_density(seq(1,64*2,by=32/4),T,F,T)
# plot_func_betareg_overall_density(seq(1,64*4,by=32/2),T,F,T)
# ###
# plot_func_betareg_overall_density(seq(1,64,by=32/8),F,T,T)
# plot_func_betareg_overall_density(seq(1,64*2,by=32/4),F,T,T)
# plot_func_betareg_overall_density(seq(1,64*4,by=32/2),F,T,T)
# ###
# plot_func_betareg_overall_density(c(seq(1,16,by=1)),T,F,T)
# plot_func_betareg_overall_density(c(seq(17,32,by=1)),T,F,T)
# plot_func_betareg_overall_density(c(seq(33,48,by=1)),T,F,T)
# plot_func_betareg_overall_density(c(seq(49,64,by=1)),T,F,T)
# ###
# plot_func_betareg_overall_density(c(seq(65,80,by=1)),T,F,T)
# plot_func_betareg_overall_density(c(seq(81,112,by=2)),T,F,T)
# plot_func_betareg_overall_density(c(seq(113,32*7,by=8)),T,F,T)
# ###
#####################################################
### "Right tail probability" section of the paper ###
### tail probability P(y>r|x) draft value curves  ###
#####################################################
### posterior summary of tail probability
get_tail_prob_df <- function(q) {
print(paste0("computing tail prob for q=",q))
assertthat::assert_that(q > bust_cutoff)
df_post_draws %>%
mutate(
q = q,
tail_prob_given_notbust = pbeta(q, shape1, shape2, lower.tail = F),
tail_prob = (1-bust_prob)*tail_prob_given_notbust
) %>%
group_by(draw,q) %>%
mutate(tail_prob_1 = tail_prob/first(tail_prob)) %>%
group_by(i,q) %>%
summarise(
tail_prob_L = quantile(tail_prob, .025),
tail_prob_M = mean(tail_prob),
tail_prob_U = quantile(tail_prob, 0.975),
tail_prob_1_L = quantile(tail_prob_1, .025),
tail_prob_1_M = mean(tail_prob_1),
tail_prob_1_U = quantile(tail_prob_1, 0.975),
.groups = "drop"
)
}
df_post_summary_tail_prob = bind_rows(lapply(q_grid, get_tail_prob_df)) %>% left_join(df_new)
df_post_summary_tail_prob
### draft value curves using v_q(x) = P(y>r|x)
### plot posterior tail probability
plot_tail_probs =
df_post_summary_tail_prob %>%
mutate(q1 = formattable::percent(q,perc_digits)) %>%
ggplot(aes(
x = draft_pick, y = tail_prob_M,
)) +
geom_ribbon(aes(ymin = tail_prob_U, ymax=tail_prob_L,fill=factor(q1)), alpha = 0.35) +
geom_line(linewidth=2, aes(color=factor(q1))) +
xlab("Draft position") +
ylab("Probability") +
# scale_color_manual(name="Eliteness cutoff\n(percentage of cap)", values = my_palette_1) +
# scale_fill_manual(name="Eliteness cutoff\n(percentage of cap)", values = my_palette_1) +
scale_color_brewer(name="Right tail probability\neliteness cutoff\n(percentage of cap)", palette = "Set1") +
scale_fill_brewer(name="Right tail probability\neliteness cutoff\n(percentage of cap)", palette = "Set1") +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_tail_probs
ggsave("plots_overall/plot_tail_probs_raw_SE.png",
plot_tail_probs, width=8, height=4)
df_post_summary_tail_prob_1 =
bind_rows(
df_post_summary_tail_prob %>%
rename(v1 = tail_prob_1_M) %>%
select(draft_pick,q,v1, tail_prob_1_L, tail_prob_1_U) %>%
mutate(desc = "right_tail_prob"),
df_plot_Massey_Thaler_0 %>%
rename(v1 = performance) %>%
select(draft_pick, v1) %>%
mutate(desc = "performance"),
df_trade_market_weibull %>%
mutate(desc = "market") %>%
rename(v1 = V_G1)
)
df_post_summary_tail_prob_1
plot_tail_probs_labels = c(
"right_tail_prob" = "Right\ntail\nprobability",
"performance" = "Expected\nperformance\nvalue",
"market" = "Fitted\ntrade\nmarket\n"
)
plot_tail_probs_relative_2_SE =
df_post_summary_tail_prob_1 %>%
mutate(q1 = formattable::percent(q,perc_digits)) %>%
ggplot(aes(x = draft_pick, y = v1)) +
geom_ribbon(aes(ymin = tail_prob_1_L, ymax=tail_prob_1_U, fill = factor(q1)),
data = . %>% filter(!is.na(q)), alpha = 0.35) +
geom_line(linewidth=2, aes(color=factor(q1)), data = . %>% filter(!is.na(q))) +
geom_line(linewidth=2, aes(linetype=desc), data = . %>% filter(is.na(q)) ) +
xlab("Draft position") +
ylab("Value relative to first pick") +
scale_linetype_manual(
name="",
labels = plot_tail_probs_labels,
values=c(
"right_tail_prob" = "solid",
"performance" = "dotted",
"surplus" = "longdash",
"market" = "solid"
),
) +
theme(legend.key.width=unit(2.5,"cm")) +
scale_color_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1"
) +
scale_fill_brewer(
name="Right tail probability\neliteness cutoff\n(percentage of cap)",
palette = "Set1"
) +
theme(
legend.text = element_text(size=16),
legend.title = element_text(size=16),
# legend.spacing.y = unit(0, "pt"),
legend.spacing.y = unit(0, "lines"),
legend.margin = margin(0, 0, 0, 0),
) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_tail_probs_relative_2_SE
ggsave("plots_overall/plot_tail_probs_relative_SE.png",
plot_tail_probs_relative_2_SE, width=8, height=4.5)
# temp =
#   players_2C %>%
#   filter(position =="QB") %>%
#   arrange(-apy_cap_pct_2C)
# temp
#
# players_2C %>% filter(apy_cap_pct_2C >= 0.15) %>% mutate(n())
# 16/nrow(players_2C)
df_post_summary_tail_prob
q_grid
df_post_summary_tail_prob_1
q_grid
get_tail_prob_df
df_trade_market_weibull
df_trade_market_weibull
df_post_summary_tail_prob_1
df_trade_market_weibull %>% rename(v1 = V_G1)
###
dist_to_market <- function(
df_right_tail,
df_market = df_trade_market_weibull
) {
v1_right_tail = df_right_tail$v1
v1_market = df_market$V_G1
mean(abs(v1_right_tail - v1_market))
}
get_tail_prob_df(q = 0.15)
###
dist_to_market <- function(
df_right_tail,
df_market = df_trade_market_weibull
) {
v1_right_tail = df_right_tail$tail_prob_1_M
v1_market = df_market$V_G1
mean(abs(v1_right_tail - v1_market))
}
### check
dist_to_market(get_tail_prob_df(q = 0.15))
### distance (MAE) of the market curve to a given right tail probability curve
dist_to_market <- function(
q,
df_market = df_trade_market_weibull
) {
v1_right_tail = get_tail_prob_df(q)$tail_prob_1_M
v1_market = df_market$V_G1
mean(abs(v1_right_tail - v1_market))
}
### distance (MAE) of the market curve to a given right tail probability curve
dist_to_market <- function(
q,
df_market = df_trade_market_weibull
) {
v1_right_tail = get_tail_prob_df(q)$tail_prob_1_M
v1_market = df_market$V_G1
mean(abs(v1_right_tail - v1_market))
}
# ### check
dist_to_market(q = 0.15)
?optim
### minimize
o = optim(fun = dist_to_market, lower = 0.13, upper = 0.18)
### minimize
o = optim(par = 0.15, fun = dist_to_market, lower = 0.13, upper = 0.18)
### minimize
o = optim(par = 0.15, fn = dist_to_market, lower = 0.13, upper = 0.18)
o
o$par
### minimize
o = optim(par = 0.15, fn = dist_to_market, lower = 0.13, upper = 0.21)
o$par
### minimize
o = optim(par = 0.18, fn = dist_to_market, lower = 0.16, upper = 0.20)
o$par
### distance (MAE) of the market curve to a given right tail probability curve
dist_to_market <- function(
q,
df_market = df_trade_market_weibull
) {
v1_right_tail = get_tail_prob_df(q)$tail_prob_1_M
v1_market = df_market$V_G1
# mean(abs(v1_right_tail - v1_market))
mean((v1_right_tail - v1_market)**2)
}
### minimize
o = optim(par = 0.18, fn = dist_to_market, lower = 0.16, upper = 0.20)
o$par
### minimize
o = optim(par = 0.18, fn = dist_to_market, lower = 0.16, upper = 0.21)
o$par
### distance (MAE) of the market curve to a given right tail probability curve
dist_to_market <- function(
q,
df_market = df_trade_market_weibull
) {
v1_right_tail = get_tail_prob_df(q)$tail_prob_1_M
v1_market = df_market$V_G1
mean(abs(v1_right_tail - v1_market))
}
### minimize
o = optim(par = 0.18, fn = dist_to_market, lower = 0.16, upper = 0.20)
o$par
###
temp = players_2C %>% filter(position =="QB") %>% arrange(-apy_cap_pct_2C)
temp
players_2C %>% filter(apy_cap_pct_2C >= o$par) %>% mutate(n())
16/nrow(players_2C)
View(players_2C)
###
# temp = players_2C %>% filter(position =="QB") %>% arrange(-apy_cap_pct_2C)
temp = players_2C %>% filter(position =="QB" & years > 1) %>% arrange(-apy_cap_pct_2C)
temp
rm(temp)
###
# temp = players_2C %>% filter(position =="QB") %>% arrange(-apy_cap_pct_2C)
qbs_longerContract_A = players_2C %>% filter(position =="QB" & years > 1) %>% arrange(-apy_cap_pct_2C)
qbs_longerContract_A
qbs_longerContract_A %>% filter(apy_cap_pct_2C >= o$par) %>% mutate(n())
qbs_above_eliteness_threshold = qbs_longerContract_A %>% filter(apy_cap_pct_2C >= o$par) %>% mutate(n())
nrow(qbs_above_eliteness_threshold)
nrow(qbs_above_eliteness_threshold)
nrow(qbs_above_eliteness_threshold)/nrow(qbs_longerContract_A)
nrow(qbs_above_eliteness_threshold)
nrow(qbs_above_eliteness_threshold)
nrow(qbs_longerContract_A)
8/65
o$par
qbs_longerContract_A %>% mutate(diff = abs(o$par -apy_cap_pct_2C))
qbs_longerContract_A %>% mutate(diff = abs(o$par -apy_cap_pct_2C)) %>% arrange(-diff)
temp = qbs_longerContract_A %>% mutate(diff = abs(o$par -apy_cap_pct_2C)) %>% arrange(-diff)
View(temp)
temp = qbs_longerContract_A %>% mutate(diff = abs(o$par -apy_cap_pct_2C)) %>% arrange(diff)
View(temp)
o$par
View(temp)
