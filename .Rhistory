if (includeErrorBars) "_SE" else "", ".png"
)
ggsave(filepath, p, width = 10, height=10)
} else {
return(p)
}
# p
}
###
# plot_func_betareg_overall_density(c(seq(1,32*7,by=32/2)),F,F,F)
# plot_func_betareg_overall_density(c(seq(1,32*3,by=8), seq(32*3,32*5,by=16)),F,F,F)
# plot_func_betareg_overall_density(c(seq(1,32*2,by=32/8)),F,F,F)
###
# plot_func_betareg_overall_density(seq(1,64*2,by=32/4),T,T,T)
###
plot_func_betareg_overall_density(seq(1,64,by=32/8),T,F,T)
plot_func_betareg_overall_density(seq(1,64*2,by=32/4),T,F,T)
plot_func_betareg_overall_density(seq(1,64*4,by=32/2),T,F,T)
###
plot_func_betareg_overall_density(seq(1,64,by=32/8),F,T,T)
plot_func_betareg_overall_density(seq(1,64*2,by=32/4),F,T,T)
plot_func_betareg_overall_density(seq(1,64*4,by=32/2),F,T,T)
###
plot_func_betareg_overall_density(c(seq(1,16,by=1)),T,F,T)
plot_func_betareg_overall_density(c(seq(17,32,by=1)),T,F,T)
plot_func_betareg_overall_density(c(seq(33,48,by=1)),T,F,T)
plot_func_betareg_overall_density(c(seq(49,64,by=1)),T,F,T)
###
plot_func_betareg_overall_density(c(seq(65,80,by=1)),T,F,T)
plot_func_betareg_overall_density(c(seq(81,112,by=2)),T,F,T)
plot_func_betareg_overall_density(c(seq(113,32*7,by=8)),T,F,T)
###
#################################
### median draft value curves ###
#################################
### median posterior summary
df_post_summary_med =
df_post_summary_musd %>%
left_join(df_new) %>%
select(i,draft_pick, all_of(contains("med"))) %>%
pivot_longer(-c(i,draft_pick)) %>%
filter(!str_detect(name, "1")) %>%
mutate(
quantity = str_remove_all(name, "L_|L1_|M_|M1_|U_|U1_"),
letter = str_sub(name,1,1),
) %>%
select(-name) %>%
pivot_wider(names_from = "quantity", values_from="value") %>%
group_by(letter) %>%
mutate(med1 = med/first(med)) %>%
ungroup() %>%
pivot_wider(names_from = "letter", values_from = c("med", "med1"))
df_post_summary_med
df_post_summary_med_1 =
left_join(
df_post_summary_med,
df_post_summary_perf_EV %>%
select(i,draft_pick,all_of(starts_with("perf_EV")),compensation_v1)
)
df_post_summary_med_1
df_post_summary_med_A =
df_post_summary_med_1 %>%
pivot_longer(-c(i,draft_pick,compensation_v1)) %>%
# filter(str_detect(name, "1")) %>%
mutate(
letter = str_sub(name, -1),
curve = ifelse(str_detect(name, "med"), "med", "EV"),
rel = str_detect(name,"1"),
) %>%
select(-c(name)) %>%
pivot_wider(values_from = value, names_from = c("letter")) %>%
mutate(curve = case_when(
curve == "med" ~ "median",
curve == "EV" ~ "mean",
))
df_post_summary_med_A
### plot posterior median
plot_med =
df_post_summary_med_A %>%
bind_rows(
compensation_1C %>% rename(M = rookie_contract_cap_pct) %>%
mutate(curve = "compensation", rel=F)
) %>%
filter(draft_pick < 255) %>%
filter(!rel) %>%
ggplot(aes(x = draft_pick, y = M, color=curve)) +
geom_line(linewidth=2) +
xlab("draft pick") +
ylab("apy cap pct") +
scale_color_brewer(name = "", palette="Set1") +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
plot_med
### plot relative posterior median
plot_med_relative =
df_post_summary_med_A %>%
bind_rows(
compensation_1C %>% rename(M = compensation_v1) %>%
mutate(curve = "compensation", rel=T)
) %>%
filter(draft_pick < 255) %>%
filter(rel) %>%
ggplot(aes(x = draft_pick, y = M, color=curve)) +
geom_line(linewidth=2) +
xlab("draft pick") +
ylab("value relative to first pick") +
scale_color_brewer(name = "", palette="Set1") +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
plot_med_relative
ggsave("plots_overall/plot_med_0.png",
plot_med + plot_med_relative,
width=17, height=5)
#####################################################
### "Right tail probability" section of the paper ###
### tail probability P(y>r|x) draft value curves  ###
#####################################################
### posterior summary of tail probability
# q_grid = c(seq(0.05, 0.15, by=0.02))
# q_grid = c(seq(0.05, 0.15, length.out=4))
# perc_digits = 2
q_grid = c(seq(0.075, 0.15, length.out=4))
perc_digits = 1
q_grid
get_tail_prob_df <- function(q) {
print(paste0("computing tail prob for q=",q))
assertthat::assert_that(q > bust_cutoff)
df_post_draws %>%
mutate(
q = q,
tail_prob_given_notbust = pbeta(q, shape1, shape2, lower.tail = F),
tail_prob = (1-bust_prob)*tail_prob_given_notbust) %>%
group_by(draw,q) %>%
mutate(tail_prob_1 = tail_prob/first(tail_prob)) %>%
group_by(i,q) %>%
summarise(
tail_prob_L = quantile(tail_prob, .025),
tail_prob_M = mean(tail_prob),
tail_prob_U = quantile(tail_prob, 0.975),
tail_prob_1_L = quantile(tail_prob_1, .025),
tail_prob_1_M = mean(tail_prob_1),
tail_prob_1_U = quantile(tail_prob_1, 0.975),
.groups = "drop"
)
}
df_post_summary_tail_prob_0 = bind_rows(lapply(q_grid, get_tail_prob_df))
df_post_summary_tail_prob_0
df_post_summary_tail_prob =
left_join(
df_post_summary_tail_prob_0,
df_post_summary_perf_EV %>%
select(i,draft_pick,all_of(starts_with("perf_EV1")),compensation_v1)
)
df_post_summary_tail_prob
### draft value curves using v_q(x) = P(y>r|x)
### plot posterior tail probability
plot_tail_probs =
df_post_summary_tail_prob %>%
mutate(q1 = percent(q,perc_digits)) %>%
filter(draft_pick < 255) %>%
ggplot(aes(x = draft_pick, y = tail_prob_M, color=factor(q1))) +
geom_line(linewidth=2) +
xlab("draft position") +
ylab("probability") +
scale_color_brewer(name="eliteness cutoff\n(percent of cap)", palette = "Set1") +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_tail_probs
ggsave("plots_overall/plot_tail_probs_raw.png",
plot_tail_probs, width=8, height=4.5)
df_post_summary_tail_prob_1 =
bind_rows(
df_post_summary_tail_prob %>% rename(v1 = tail_prob_1_M) %>% select(draft_pick,q,v1) %>%
mutate(desc = "Right tail prob."),
# df_post_summary_perf_EV %>% rename(v1 = perf_EV1_M) %>% select(draft_pick, v1) %>%
#   mutate(desc = "expected\nperformance\nvalue\n"),
df_plot_Massey_Thaler_0 %>% rename(v1 = performance) %>% select(draft_pick, v1) %>%
mutate(desc = "expected\nperformance\nvalue\n"),
df_trade_market_weibull %>% mutate(desc = "fitted\ntrade\nmarket\n") %>% rename(v1 = V_G1),
)
df_post_summary_tail_prob_1
table(df_post_summary_tail_prob_1$desc)
plot_tail_probs_relative_2 =
df_post_summary_tail_prob_1 %>%
mutate(q1 = percent(q,perc_digits)) %>%
ggplot(aes(x = draft_pick, y = v1)) +
geom_line(linewidth=2, aes(color=factor(q1)), data = . %>% filter(!is.na(q))) +
geom_line(linewidth=2, aes(linetype=desc), data = . %>% filter(is.na(q)) ) +
xlab("draft position") +
ylab("value relative to first pick") +
scale_linetype_manual(name="",
values = c(
"dotted", "solid", "longdash"
)
) +
theme(legend.key.width=unit(1.8,"cm")) +
scale_color_brewer(name="eliteness cutoff\n(percent of cap)", palette = "Set1") +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
# plot_tail_probs_relative_2
ggsave("plots_overall/plot_tail_probs_relative.png",
plot_tail_probs_relative_2, width=8, height=4.5)
###
temp =
players_2C %>%
filter(position =="QB") %>%
arrange(-apy_cap_pct_2C)
temp
players_2C %>% filter(apy_cap_pct_2C >= 0.15) %>% mutate(n())
16/nrow(players_2C)
# ### surplus value tail probability curve
# table(df_post_summary_tail_prob$q)
# # q_ = 0.10
# # q_ = 0.15
# q_ = 0.175
# df_plot_surplus_tail_prob =
#   df_post_summary_tail_prob %>%
#   filter(q == q_) %>%
#   select(draft_pick, compensation_v1,
#          tail_prob_1_M, tail_prob_1_L, tail_prob_1_U) %>%
#   mutate(
#     surplus_1_M = tail_prob_1_M - compensation_v1,
#     surplus_1_L = tail_prob_1_L - compensation_v1,
#     surplus_1_U = tail_prob_1_U - compensation_v1,
#   ) %>%
#   rename(compensation_1_M  = compensation_v1)
# df_plot_surplus_tail_prob
# tail_prob_str = paste0("tail prob. P(y>r=", q_, "|x)")
# df_plot_surplus_tail_prob_1 =
#   df_plot_surplus_tail_prob %>%
#   pivot_longer(-draft_pick) %>%
#   mutate(
#     curve = str_remove_all(name, "_v1|_1_M|_1_L|_1_U"),
#     letter = str_sub(name, nchar(name), nchar(name)),
#     curve = ifelse(curve=="tail_prob", tail_prob_str, curve),
#   ) %>%
#   select(-name) %>%
#   pivot_wider(names_from = "letter", values_from = "value")
# df_plot_surplus_tail_prob_1
#
# color_vals = c("firebrick", "dodgerblue2", "forestgreen")
# color_vals = setNames(color_vals, c("compensation", tail_prob_str, "surplus"))
# fill_vals = c("dodgerblue2", "forestgreen")
# fill_vals = setNames(fill_vals, c(tail_prob_str, "surplus"))
# df_plot_surplus_tail_prob_1 %>%
#   ggplot(aes(x = draft_pick, color = curve, fill = curve)) +
#   geom_ribbon(aes(ymin=L, ymax=U), alpha=0.5) +
#   geom_line(aes(y=M), linewidth=1) +
#   xlab("draft pick") +
#   scale_color_manual(name="", values=color_vals) +
#   scale_fill_manual(name="", values=fill_vals) +
#   # scale_color_brewer(name="", palette = "Set1") +
#   ylab("value relative to first pick") +
#   # labs(title=paste0("q = ", q_)) +
#   # labs(title = "posterior mean relative EV \U03BC(x)/\U03BC(x=1)") +
#   scale_x_continuous(breaks=seq(1,32*9,by=32*2))
### the step success function
G_step_func <- function(q) {
function(y) { as.numeric(y>q) }
}
### plot the step success function
plot_G_step <- function(q) {
tibble(x = seq(0,0.30,length.out=1000)) %>%
ggplot(aes(x=x)) +
xlab("y") + ylab("g") +
labs(
title="step function",
# subtitle = paste0("g(y) = 1{y > ",q,"}")
subtitle = paste0("g(y) = 1{y > ",percent(q,0),"}")
) +
theme(
plot.subtitle = element_text(size=15),
) +
stat_function(
fun = G_step_func(q),
colour = "black", geom = "point"
)
}
### the G curve success function
G_Scurve_func <- function(a, b) {
function(y) { pbeta(y, a, b) }
}
### s curve string description
betaCdfStr <- function(a,b) {
# bquote(paste('g(y) = F'['Beta']*"(\U003B1=",.(a),", \U03B2=",.(b),")(y)"))
# paste0("g(y) = betaCdf(\U003B1=",a,", \U03B2=",b,")(y)")
paste0("g(y) = s(\U003B1=",a,", \U03B2=",b,")(y)")
}
plot_G_Scurve <- function(a,b,quartiles=F) {
max_y = 0.30
plot_df_G =
tibble(y = seq(0,max_y,length.out=1000)) %>%
mutate(
G = G_Scurve_func(a=a, b=b)(y),
diffG = c(0,diff(G)),
diffy = c(0,diff(y)),
deriv = diffG/diffy,
derivCrosses1 = as.numeric(
deriv >= 1 & lag(deriv,default=0) <= 1 |
deriv <= 1 & lag(deriv,default=0) >= 1
),
derivCrosses1 = ifelse(is.na(derivCrosses1),0,derivCrosses1),
)
plot_df_G
plot_G =
plot_df_G %>%
ggplot(aes(x=y,y=G)) +
geom_point() +
xlab("y") + ylab("g") +
labs(
title="s curve",
subtitle = betaCdfStr(a,b)
) +
theme(
plot.subtitle = element_text(size=15),
)
plot_G
if (quartiles) {
# quartiles_ = quantile( (plot_df_G)$y, c(0.25, 0.5, 0.75))
quartiles_ = (plot_df_G %>% filter(derivCrosses1==1))$y
plot_G =
plot_G +
geom_vline(xintercept = quartiles_[1], color="gray60", linewidth=1, linetype="dashed") +
geom_vline(xintercept = quartiles_[2], color="gray60", linewidth=1, linetype="dashed") +
geom_vline(xintercept = quartiles_[3], color="gray60", linewidth=1, linetype="dashed")
plot_G
# quartiles_ = quantile( (plot_df_G)$y, c(0.25, 0.5, 0.75))
# plot_G =
#   plot_G +
#   geom_vline(xintercept = quartiles_[1], color="gray60", linewidth=1, linetype="dashed") +
#   geom_vline(xintercept = quartiles_[2], color="gray60", linewidth=1, linetype="dashed") +
#   geom_vline(xintercept = quartiles_[3], color="gray60", linewidth=1, linetype="dashed")
# plot_G
}
plot_G
# plot_G =
#   tibble(x = seq(0,0.30,length.out=1000)) %>%
#   ggplot(aes(x=x)) +
#   xlab("y") + ylab("g") +
#   labs(
#     title="s curve outcome value function",
#     subtitle = betaCdfStr(a,b)
#   ) +
#   theme(
#     plot.subtitle = element_text(size=15),
#   ) +
#   stat_function(
#     fun = G_Scurve_func(a=a, b=b),
#     colour = "black", geom = "point"
#   )
# if (quartiles) {
#
# }
# plot_G
# print(paste0("G(y=0.01) = ", G_Scurve_func(a=a, b=b)(0.01)))
# print(paste0("G(y=0.10) = ", G_Scurve_func(a=a, b=b)(0.10)))
# print(paste0("G(y=0.25) = ", G_Scurve_func(a=a, b=b)(0.25)))
plot_G
}
# plot_G_Scurve(a=6,b=35,quartiles=T)
plot_G_Scurve(a=6,b=55,quartiles=T)
plot_G_Scurve <- function(a,b,quartiles=F) {
max_y = 0.30
plot_df_G =
tibble(y = seq(0,max_y,length.out=1000)) %>%
mutate(
G = G_Scurve_func(a=a, b=b)(y),
diffG = c(0,diff(G)),
diffy = c(0,diff(y)),
deriv = diffG/diffy,
derivCrosses1 = as.numeric(
deriv >= 1 & lag(deriv,default=0) <= 1 |
deriv <= 1 & lag(deriv,default=0) >= 1
),
derivCrosses1 = ifelse(is.na(derivCrosses1),0,derivCrosses1),
)
plot_df_G
plot_G =
plot_df_G %>%
ggplot(aes(x=y,y=G)) +
geom_point() +
xlab("y") + ylab("g") +
labs(
title="s curve",
subtitle = betaCdfStr(a,b)
) +
theme(
plot.subtitle = element_text(size=15),
)
plot_G
if (quartiles) {
# quartiles_ = quantile( (plot_df_G)$y, c(0.25, 0.5, 0.75))
quartiles_ = (plot_df_G %>% filter(derivCrosses1==1))$y
plot_G =
plot_G +
geom_vline(xintercept = quartiles_[1], color="gray60", linewidth=1, linetype="dashed") +
geom_vline(xintercept = quartiles_[2], color="gray60", linewidth=1, linetype="dashed") +
geom_vline(xintercept = quartiles_[3], color="gray60", linewidth=1, linetype="dashed")
plot_G
# quartiles_ = quantile( (plot_df_G)$y, c(0.25, 0.5, 0.75))
# plot_G =
#   plot_G +
#   geom_vline(xintercept = quartiles_[1], color="gray60", linewidth=1, linetype="dashed") +
#   geom_vline(xintercept = quartiles_[2], color="gray60", linewidth=1, linetype="dashed") +
#   geom_vline(xintercept = quartiles_[3], color="gray60", linewidth=1, linetype="dashed")
# plot_G
}
plot_G
# plot_G =
#   tibble(x = seq(0,0.30,length.out=1000)) %>%
#   ggplot(aes(x=x)) +
#   xlab("y") + ylab("g") +
#   labs(
#     title="s curve outcome value function",
#     subtitle = betaCdfStr(a,b)
#   ) +
#   theme(
#     plot.subtitle = element_text(size=15),
#   ) +
#   stat_function(
#     fun = G_Scurve_func(a=a, b=b),
#     colour = "black", geom = "point"
#   )
# if (quartiles) {
#
# }
# plot_G
# print(paste0("G(y=0.01) = ", G_Scurve_func(a=a, b=b)(0.01)))
# print(paste0("G(y=0.10) = ", G_Scurve_func(a=a, b=b)(0.10)))
# print(paste0("G(y=0.25) = ", G_Scurve_func(a=a, b=b)(0.25)))
plot_G
}
plot_G_Scurve(a=6,b=35,quartiles=T)
plot_G_Scurve(a=6,b=35,quartiles=T)
plot_G_Scurve(a=6,b=55,quartiles=T)
plot_G_Scurve <- function(a,b,quartiles=F) {
max_y = 0.30
plot_df_G =
tibble(y = seq(0,max_y,length.out=1000)) %>%
mutate(
G = G_Scurve_func(a=a, b=b)(y),
diffG = c(0,diff(G)),
diffy = c(0,diff(y)),
deriv = diffG/diffy,
derivCrosses1 = as.numeric(
deriv >= 1 & lag(deriv,default=0) <= 1 |
deriv <= 1 & lag(deriv,default=0) >= 1
),
derivCrosses1 = ifelse(is.na(derivCrosses1),0,derivCrosses1),
)
plot_df_G
plot_G =
plot_df_G %>%
ggplot(aes(x=y,y=G)) +
geom_point() +
xlab("y") + ylab("g") +
labs(
title="s curve",
subtitle = betaCdfStr(a,b)
) +
theme(
plot.subtitle = element_text(size=15),
)
plot_G
if (quartiles) {
# quartiles_ = quantile( (plot_df_G)$y, c(0.25, 0.5, 0.75))
quartiles_ = (plot_df_G %>% filter(derivCrosses1==1))$y
plot_G =
plot_G +
geom_vline(xintercept = quartiles_[1], color="gray60", linewidth=1, linetype="dashed") +
geom_vline(xintercept = quartiles_[2], color="gray60", linewidth=1, linetype="dashed") +
geom_vline(xintercept = quartiles_[3], color="gray60", linewidth=1, linetype="dashed")
plot_G
# quartiles_ = quantile( (plot_df_G)$y, c(0.25, 0.5, 0.75))
# plot_G =
#   plot_G +
#   geom_vline(xintercept = quartiles_[1], color="gray60", linewidth=1, linetype="dashed") +
#   geom_vline(xintercept = quartiles_[2], color="gray60", linewidth=1, linetype="dashed") +
#   geom_vline(xintercept = quartiles_[3], color="gray60", linewidth=1, linetype="dashed")
# plot_G
}
plot_G
# plot_G =
#   tibble(x = seq(0,0.30,length.out=1000)) %>%
#   ggplot(aes(x=x)) +
#   xlab("y") + ylab("g") +
#   labs(
#     title="s curve outcome value function",
#     subtitle = betaCdfStr(a,b)
#   ) +
#   theme(
#     plot.subtitle = element_text(size=15),
#   ) +
#   stat_function(
#     fun = G_Scurve_func(a=a, b=b),
#     colour = "black", geom = "point"
#   )
# if (quartiles) {
#
# }
# plot_G
# print(paste0("G(y=0.01) = ", G_Scurve_func(a=a, b=b)(0.01)))
# print(paste0("G(y=0.10) = ", G_Scurve_func(a=a, b=b)(0.10)))
# print(paste0("G(y=0.25) = ", G_Scurve_func(a=a, b=b)(0.25)))
return(plot_G)
}
plot_G_Scurve(a=6,b=35,quartiles=T)
plot_G_Scurve(a=6,b=55,quartiles=T)
ggsave("plots_overall/plot_G_curve_S1.png", width=5, height=4)
# plot_G_Scurve(a=5,b=60)
plot_G_Scurve(a=8,b=35)
ggsave("plots_overall/plot_G_curve_S2.png", width=5, height=4)
plot_G_Scurve(a=6,b=35,quartiles=T)
ggsave("plots_overall/plot_G_curve_S1.png", width=5, height=4)
plot_G_Scurve(a=6,b=55,quartiles=T)
ggsave("plots_overall/plot_G_curve_S1.png", width=5, height=4)
