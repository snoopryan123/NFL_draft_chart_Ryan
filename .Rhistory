# plot_G
}
plot_G
# plot_G =
#   tibble(x = seq(0,0.30,length.out=1000)) %>%
#   ggplot(aes(x=x)) +
#   xlab("y") + ylab("g") +
#   labs(
#     title="s curve outcome value function",
#     subtitle = betaCdfStr(a,b)
#   ) +
#   theme(
#     plot.subtitle = element_text(size=15),
#   ) +
#   stat_function(
#     fun = G_Scurve_func(a=a, b=b),
#     colour = "black", geom = "point"
#   )
# if (quartiles) {
#
# }
# plot_G
# print(paste0("G(y=0.01) = ", G_Scurve_func(a=a, b=b)(0.01)))
# print(paste0("G(y=0.10) = ", G_Scurve_func(a=a, b=b)(0.10)))
# print(paste0("G(y=0.25) = ", G_Scurve_func(a=a, b=b)(0.25)))
plot_G
}
plot_G_Scurve(a=6,b=35,quartiles=T)
ggsave("plots_overall/plot_G_curve_S1.png", width=5, height=4)
### posterior summary of beta shape parameters and bust probability
df_post_summary_shapeparams =
df_post_summary_musd %>%
select(i, all_of(contains("shape")), all_of(contains("bust_prob"))) %>%
left_join(df_new) %>% relocate(draft_pick, .after=i) %>%
left_join(compensation_1C) %>%
select(-compensation_v1) %>%
rename(cost = rookie_contract_cap_pct) %>%
relocate(cost, .after = draft_pick)
df_post_summary_shapeparams
### g(y)•f(y|x) OR G(y-cost)•f(y|x)
G_times_density <- function(bust_prob, shape1, shape2, cost, G_func, surplus=FALSE) {
function(y) {
density_y =  ifelse(
y > bust_cutoff,
(1-bust_prob)*dbeta(y,shape1,shape2),
bust_prob/bust_cutoff
)
if (surplus) {
G_func(y-cost)*density_y
} else {
G_func(y)*density_y
}
}
# if (surplus) {
#   func = function(y) {
#     density_y =  ifelse(
#       y > bust_cutoff,
#       (1-bust_prob)*dbeta(y,shape1,shape2),
#       bust_prob/bust_cutoff
#     )
#     G_func(y-cost)*density_y
#   }
# } else {
#   func = function(y) {
#     density_y =  ifelse(
#       y > bust_cutoff,
#       (1-bust_prob)*dbeta(y,shape1,shape2),
#       bust_prob/bust_cutoff
#     )
#     G_func(y)*density_y
#   }
# }
# func
}
### get dataframe of V_G(x) = E[g(y)|x] = ∫ g(y)•f(y|x) dy
### over each value of x
get_df_V_G <- function(
G_func, desc="", surplus=FALSE, printme=TRUE, SE=FALSE
) {
V_G <- function(x) {
if (printme) print(paste0("computing V_G(x) for draft pick x = ", x))
dfx = df_post_summary_shapeparams %>% filter(draft_pick == x)
dfx
integrand_x = G_times_density(
bust_prob=dfx$M_bust_prob, shape1=dfx$M_shape1, shape2=dfx$M_shape2, cost = dfx$cost,
G_func=G_func, surplus=surplus
)
int_x = integrate(integrand_x, lower = 0, upper = 1)
if (printme) print(int_x)
if (SE) {
integrand_xL = G_times_density(
bust_prob=dfx$L_bust_prob, shape1=dfx$L_shape1, shape2=dfx$L_shape2, cost = dfx$cost,
G_func=G_func, surplus=surplus
)
integrand_xU = G_times_density(
bust_prob=dfx$U_bust_prob, shape1=dfx$U_shape1, shape2=dfx$U_shape2, cost = dfx$cost,
G_func=G_func, surplus=surplus
)
int_xL = integrate(integrand_xL, lower = 0, upper = 1)
int_xU = integrate(integrand_xU, lower = 0, upper = 1)
return( sort(c(int_xL$value, int_x$value, int_xU$value)) )
} else {
return( int_x$value )
}
}
df_V_G = tibble(draft_pick = 1:256)
# browser()
V_G_values = sapply(df_V_G$draft_pick, V_G)
if (SE) {
V_G_values
temp = as_tibble(t(V_G_values))
names(temp) = paste0("V_G", c("_L", "", "_U"))
df_V_G = bind_cols(df_V_G, temp)
df_V_G = df_V_G %>% mutate(
V_G_L1 = V_G_L/first(V_G_L),
V_G1 = V_G/first(V_G),
V_G_U1 = V_G_U/first(V_G_U),
)
} else {
df_V_G$V_G = V_G_values
df_V_G = df_V_G %>% mutate(V_G1 = V_G/first(V_G))
}
df_V_G = df_V_G %>% mutate(desc = desc, surplus = surplus)
df_V_G
}
### get V_G(x) for 1 function g(y) = 1
df_V_G_1f = get_df_V_G(
G_func=function(y) { 1 },
desc=paste0("g(y) = 1")
)
df_V_G_1f
### all values should be 1 (integrates to 1)
mean(abs(df_V_G_1f$V_G))
### get V_G(x) for identity function g(y) = y
df_V_G_id = get_df_V_G(
G_func=function(y) { y },
desc=paste0("g(y) = y")
)
df_V_G_id
### check that V_id(x) matches E(y|x)
df_plot_G_id_perfv =
bind_rows(
df_V_G_id %>% mutate(desc = paste0("\nE[g(y)|x], ", desc, "\n"))
,
df_post_summary_perf_EV %>%
select(draft_pick, perf_EV_M, perf_EV1_M) %>%
rename(V_G = perf_EV_M, V_G1 = perf_EV1_M) %>%
mutate(desc = "E[Y|x]")
)
### EV performance value curve
df_post_summary_perf_EV =
df_post_summary_musd %>%
left_join(df_new) %>%
select(i,draft_pick, all_of(contains("bust_prob")), all_of(contains("mu"))) %>%
pivot_longer(-c(i,draft_pick)) %>%
filter(!str_detect(name, "1")) %>%
mutate(
quantity = str_remove_all(name, "L_|L1_|M_|M1_|U_|U1_"),
letter = str_sub(name,1,1),
) %>%
select(-name) %>%
pivot_wider(names_from = "quantity", values_from="value") %>%
mutate(
perf_EV = bust_cutoff/2 + (1-bust_prob)*mu
) %>%
select(i, draft_pick ,letter, perf_EV) %>%
group_by(letter) %>%
mutate(perf_EV1 = perf_EV/first(perf_EV)) %>%
ungroup() %>%
pivot_wider(names_from = "letter", values_from = c("perf_EV", "perf_EV1")) %>%
left_join(compensation_1C)
df_post_summary_perf_EV
### posterior summary of beta shape parameters and bust probability
df_post_summary_shapeparams =
df_post_summary_musd %>%
select(i, all_of(contains("shape")), all_of(contains("bust_prob"))) %>%
left_join(df_new) %>% relocate(draft_pick, .after=i) %>%
left_join(compensation_1C) %>%
select(-compensation_v1) %>%
rename(cost = rookie_contract_cap_pct) %>%
relocate(cost, .after = draft_pick)
df_post_summary_shapeparams
### g(y)•f(y|x) OR G(y-cost)•f(y|x)
G_times_density <- function(bust_prob, shape1, shape2, cost, G_func, surplus=FALSE) {
function(y) {
density_y =  ifelse(
y > bust_cutoff,
(1-bust_prob)*dbeta(y,shape1,shape2),
bust_prob/bust_cutoff
)
if (surplus) {
G_func(y-cost)*density_y
} else {
G_func(y)*density_y
}
}
# if (surplus) {
#   func = function(y) {
#     density_y =  ifelse(
#       y > bust_cutoff,
#       (1-bust_prob)*dbeta(y,shape1,shape2),
#       bust_prob/bust_cutoff
#     )
#     G_func(y-cost)*density_y
#   }
# } else {
#   func = function(y) {
#     density_y =  ifelse(
#       y > bust_cutoff,
#       (1-bust_prob)*dbeta(y,shape1,shape2),
#       bust_prob/bust_cutoff
#     )
#     G_func(y)*density_y
#   }
# }
# func
}
### get dataframe of V_G(x) = E[g(y)|x] = ∫ g(y)•f(y|x) dy
### over each value of x
get_df_V_G <- function(
G_func, desc="", surplus=FALSE, printme=TRUE, SE=FALSE
) {
V_G <- function(x) {
if (printme) print(paste0("computing V_G(x) for draft pick x = ", x))
dfx = df_post_summary_shapeparams %>% filter(draft_pick == x)
dfx
integrand_x = G_times_density(
bust_prob=dfx$M_bust_prob, shape1=dfx$M_shape1, shape2=dfx$M_shape2, cost = dfx$cost,
G_func=G_func, surplus=surplus
)
int_x = integrate(integrand_x, lower = 0, upper = 1)
if (printme) print(int_x)
if (SE) {
integrand_xL = G_times_density(
bust_prob=dfx$L_bust_prob, shape1=dfx$L_shape1, shape2=dfx$L_shape2, cost = dfx$cost,
G_func=G_func, surplus=surplus
)
integrand_xU = G_times_density(
bust_prob=dfx$U_bust_prob, shape1=dfx$U_shape1, shape2=dfx$U_shape2, cost = dfx$cost,
G_func=G_func, surplus=surplus
)
int_xL = integrate(integrand_xL, lower = 0, upper = 1)
int_xU = integrate(integrand_xU, lower = 0, upper = 1)
return( sort(c(int_xL$value, int_x$value, int_xU$value)) )
} else {
return( int_x$value )
}
}
df_V_G = tibble(draft_pick = 1:256)
# browser()
V_G_values = sapply(df_V_G$draft_pick, V_G)
if (SE) {
V_G_values
temp = as_tibble(t(V_G_values))
names(temp) = paste0("V_G", c("_L", "", "_U"))
df_V_G = bind_cols(df_V_G, temp)
df_V_G = df_V_G %>% mutate(
V_G_L1 = V_G_L/first(V_G_L),
V_G1 = V_G/first(V_G),
V_G_U1 = V_G_U/first(V_G_U),
)
} else {
df_V_G$V_G = V_G_values
df_V_G = df_V_G %>% mutate(V_G1 = V_G/first(V_G))
}
df_V_G = df_V_G %>% mutate(desc = desc, surplus = surplus)
df_V_G
}
### get V_G(x) for 1 function g(y) = 1
df_V_G_1f = get_df_V_G(
G_func=function(y) { 1 },
desc=paste0("g(y) = 1")
)
df_V_G_1f
### all values should be 1 (integrates to 1)
mean(abs(df_V_G_1f$V_G))
### get V_G(x) for identity function g(y) = y
df_V_G_id = get_df_V_G(
G_func=function(y) { y },
desc=paste0("g(y) = y")
)
df_V_G_id
### check that V_id(x) matches E(y|x)
df_plot_G_id_perfv =
bind_rows(
df_V_G_id %>% mutate(desc = paste0("\nE[g(y)|x], ", desc, "\n"))
,
df_post_summary_perf_EV %>%
select(draft_pick, perf_EV_M, perf_EV1_M) %>%
rename(V_G = perf_EV_M, V_G1 = perf_EV1_M) %>%
mutate(desc = "E[Y|x]")
)
df_plot_G_id_perfv
df_plot_G_id_perfv %>%
filter(draft_pick < 255) %>%
ggplot(aes(x=draft_pick, y = V_G1, color=desc)) +
geom_line(linewidth=1) +
scale_color_brewer(name="", palette = "Set1") +
ylab("value relative to first pick") +
scale_y_continuous(limits=c(0,1)) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
### get V_G(x) for step function g(y) = 1{y>r}
q_ = 0.10
df_V_G_step = get_df_V_G(
G_func=G_step_func(q=q_),
desc=paste0("g(y) = 1{y>",q_,"}")
# desc=paste0("E[1{Y>",q_,"}|x]")
)
df_V_G_step
q_ = 0.15
df_V_G_step1 = get_df_V_G(
G_func=G_step_func(q=q_),
desc=paste0("g(y) = 1{y>",q_,"}")
# desc=paste0("E[1{Y>",q_,"}|x]")
)
df_V_G_step1
### check that V_G(x) matches P(y>r|x)
df_V_G_step %>%
mutate(desc = paste0("E[g(y)|x],\n", desc,"\n")) %>%
bind_rows(
df_post_summary_tail_prob %>%
filter(q == q_) %>%
select(draft_pick, tail_prob_M, tail_prob_1_M) %>%
rename(V_G = tail_prob_M, V_G1 = tail_prob_1_M) %>%
mutate(desc = paste0("P(Y>",q_,"|x)"))
) %>%
ggplot(aes(x=draft_pick, y = V_G1, color=desc)) +
geom_line(linewidth=1) +
scale_color_brewer(name="", palette = "Set1") +
ylab("value relative to first pick") +
scale_y_continuous(limits=c(0,1)) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
### get V_G(x) for G curve function
get_df_V_G_Scurve <- function(a,b,surplus=FALSE,printme=TRUE,SE=FALSE) {
get_df_V_G(
G_func=G_Scurve_func(a,b),
# desc = paste0("E[g(y)|x] ", ", ", betaCdfStr(a,b))
desc = betaCdfStr(a,b),
surplus = surplus,
printme=printme,
SE=SE
)
}
### compensation curve
compensation_1C
### conditional mean surplus curve
plot_surplus_condMean
### posterior conditional surplus density
df_post_summary_density_surplus =
df_post_summary_density %>%
left_join(compensation_1C) %>%
rename(cost = rookie_contract_cap_pct) %>%
mutate(s = y - cost) %>%
relocate(s, .after = y) %>%
relocate(cost, .after = s) %>%
select(-compensation_v1) %>%
arrange(draft_pick,y)
df_post_summary_density_surplus
### compensation curve
compensation_1C
### conditional mean surplus curve
plot_surplus_condMean
### posterior conditional surplus density
df_post_summary_density_surplus =
df_post_summary_density %>%
left_join(compensation_1C) %>%
rename(cost = rookie_contract_cap_pct) %>%
mutate(s = y - cost) %>%
relocate(s, .after = y) %>%
relocate(cost, .after = s) %>%
select(-compensation_v1) %>%
arrange(draft_pick,y)
df_post_summary_density_surplus
### plot posterior conditional surplus density
plot_post_surplus_density_full_rd1 =
df_post_summary_density_surplus %>%
filter(draft_pick %in% c(seq(1,32,by=2))) %>%
ggplot(aes(x=s, color=fct_reorder(factor(draft_pick), -draft_pick))) +
geom_line(aes(y=density_times_bp_M), linewidth=1) +
xlab("apy cap pct") +
ylab("density") +
labs(title = "density of surplus S") +
scale_color_discrete(name = "draft pick") +
theme(
axis.text.x = element_text(size = 10),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
plot_post_surplus_density_full_rdsall =
df_post_summary_density_surplus %>%
filter(draft_pick %in% c(seq(1,32*7,by=32/2))) %>%
ggplot(aes(x=s, color=fct_reorder(factor(draft_pick), -draft_pick))) +
geom_line(aes(y=density_times_bp_M), linewidth=1) +
xlab("apy cap pct") +
ylab("density") +
labs(title = "density of surplus S") +
scale_color_discrete(name = "draft pick") +
theme(
axis.text.x = element_text(size = 10),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
### get V_G(x) for 1 function g(y) = 1
df_V_G_1fs = get_df_V_G(
G_func=function(y) { 1 },
desc=paste0("g(y) = 1"),
surplus = TRUE
)
df_V_G_1fs
### all values should be 1 (integrates to 1)
mean(abs(df_V_G_1fs$V_G))
### get V_G(x) for various GM value functions g(y)
q_ = 0.025
df_V_G_step_S025 = get_df_V_G(
G_func=G_step_func(q=q_), desc=paste0("g(y) = 1{y>",q_,"}"), surplus = TRUE
)
df_V_G_step_S025
q_ = 0.05
df_V_G_step_S05 = get_df_V_G(
G_func=G_step_func(q=q_), desc=paste0("g(y) = 1{y>",q_,"}"), surplus = TRUE
)
df_V_G_step_S05
q_ = 0.10
df_V_G_step_S1 = get_df_V_G(
G_func=G_step_func(q=q_), desc=paste0("g(y) = 1{y>",q_,"}"), surplus = TRUE
)
df_V_G_step_S1
q_ = 0.15
df_V_G_step_S2 = get_df_V_G(
G_func=G_step_func(q=q_), desc=paste0("g(y) = 1{y>",q_,"}"), surplus = TRUE
)
df_V_G_step_S2
df_V_G_Scurve_1_S = get_df_V_G_Scurve(a=6, b=35, surplus = TRUE)
df_V_G_Scurve_1_S
df_V_G_Scurve_2_S = get_df_V_G_Scurve(a=5, b=60, surplus = TRUE)
df_V_G_Scurve_2_S
df_V_G_id_S = get_df_V_G(
G_func=function(y) { y }, desc=paste0("g(y) = y"), surplus = TRUE
)
df_V_G_id_S
df_plot_V_G_S_A =
bind_rows(
df_V_G_Scurve_1 %>%
mutate(desc = paste0("E[g(Y)|x]/E[g(Y)|x=1],\n", desc, "\n"))
,
df_V_G_Scurve_1_S %>%
mutate(desc = paste0("E[g(S)|x]/E[g(S)|x=1],\n", desc, "\n"))
,
df_V_G_id %>%
mutate(desc = paste0("E[g(Y)|x]/E[g(Y)|x=1],\n", desc, "\n"))
,
df_V_G_id_S %>%
mutate(desc = paste0("E[g(S)|x]/E[g(S)|x=1],\n", desc, "\n"))
,
df_V_G_step_S2 %>%
mutate(desc = paste0("E[g(S)|x]/E[g(S)|x=1],\n", desc, "\n"))
,
df_V_G_step1 %>%
mutate(desc = paste0("E[g(Y)|x]/E[g(Y)|x=1],\n", desc, "\n"))
,
# df_post_summary_perf_EV %>%
#   select(draft_pick, compensation_v1) %>%
#   rename(V_G1 = compensation_v1) %>%
#   mutate(desc = "compensation")
# ,
df_jj %>% rename(V_G1 = jj_v1) %>% mutate(desc = "Jimmy Johnson")
,
# df_trade_market_weibull
)
### for CMSAC24 slides
df_plot_V_G_S_A_2A =
bind_rows(
df_V_G_id_S %>% mutate(
# desc = "v(x) ~ E(y - cost(x)|x)"
desc = "expected surplus value\nv(x) ~ E(y - cost(x)|x)\n"
),
df_V_G_step_S025 %>% mutate(
desc = "v(x) ~ P(y - cost(x) > 0.025|x)"
),
df_V_G_step_S05 %>% mutate(
desc = "v(x) ~ P(y - cost(x) > 0.05|x)"
),
df_V_G_step_S1 %>% mutate(
desc = "v(x) ~ P(y - cost(x) > 0.10|x)"
),
df_V_G_step_S2 %>% mutate(
desc = "v(x) ~ P(y - cost(x) > 0.15|x)"
),
)
df_plot_V_G_S_A_2A
plot_V_G_S_A_2A =
df_plot_V_G_S_A_2A %>%
# filter(draft_pick < 255) %>%
ggplot(aes(x=draft_pick, y = V_G1, color=desc)) +
geom_hline(yintercept=1, linetype="dashed", color="gray60", linewidth=1) +
geom_hline(yintercept=0, linetype="dashed", color="gray60", linewidth=1) +
geom_line(linewidth=2) +
# scale_color_brewer(name="V(x) = E[g(y)|x]", palette = "Set1") +
scale_color_brewer(
name="",
# name=bquote(paste('V'['G']*'(x) = E[g(y)|x]/E[g(y)|x=1]')),
palette = "Set1"
# palette = "Set2"
) +
# labs(subtitle = bquote(paste('V'['G']*'(x) = E[g(y)|x]/E[g(y)|x=1]'))) +
ylab("surplus value relative to first pick") +
xlab("draft pick") +
# scale_y_continuous(limits=c(0,1)) +
scale_x_continuous(breaks=seq(1,32*9,by=32*2))
plot_V_G_S_A_2A
ggsave("plots_overall/plot_G_surplusValueCurves_2A.png",width=10,height=4)
ggsave("plots_overall/plot_G_surplusValueCurves_2A.png",width=10,height=5)
